#!/bin/bash
#
# zramcfg - configure zram for semplice
# Copyright (C) 2013  Eugenio "g7" Paolantonio
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

set -e

help() {
	# This method displays the help
	cat <<EOF
zramcfg - configure zram for semplice

USAGE: zramcfg [-r] [-f] [-q] [-h]

Arguments:
   -r                    Removes current configuration
   -q                    No output, except for errors
   -h                    Displays this message

zramcfg reads the configuration from /etc/default/zramcfg, see that file
for details.
EOF
}

error() {
	# This method displays an error
	echo "E: $@" >&2
	exit 1
}

# Parse arguments
while getopts ":hfrq" opt; do
	case "$opt" in
		h)
			help
			exit 0
			;;
		r)
			REMOVE="y"
			;;
		q)
			QUIET="y"
			;;
		\?)
			error "Invalid option: -$OPTARG"
			;;
	esac
done

# Welcome to zramcfg!

[ "$UID" != "0" ] && error "You should be root to use zramcfg."

[ ! -e /etc/default/zramcfg ] && error "Configuration file /etc/default/zramcfg missing!"

# Read configuration file
. /etc/default/zramcfg

# Remove configuration files
[ -e /etc/udev/rules.d/10-zramcfg.rules ] && rm /etc/udev/rules.d/10-zramcfg.rules
[ -e /etc/modprobe.d/zramcfg.conf ] && rm /etc/modprobe.d/zramcfg.conf
[ -e /etc/modules-load.d/zramcfg.conf ] && rm /etc/modules-load.d/zramcfg.conf
#[ -e /etc/fstab.d/10-zramcfg ] && rm /etc/fstab.d/10-zramcfg
sed -i '/# added by zramcfg/d' /etc/fstab

if [ -n "$REMOVE" ]; then
	[ -z "$QUIET" ] && echo "Successfully removed configuration."
	exit 0
fi

# Parse NUM_DEVICES
if [ "$NUM_DEVICES" == "cpu" ]; then
	# Should look at the cpu to get the number of cores...
	NUM_DEVICES="`grep -c processor /proc/cpuinfo`"
	[ "$NUM_DEVICES" == "0" ] && NUM_DEVICES="1"
fi

# Parse SIZE
if [[ "$SIZE" == *"%"* ]]; then
	# It's a percentage
	__memory="`grep MemTotal /proc/meminfo | awk '{ print $2 }'`"
	# 8000 : 100 = x : 25
	SIZE=$(($__memory * ${SIZE//"%"/} / 100 / 1024))
fi
# Now divide it equally...
SIZE=$(($SIZE / $NUM_DEVICES ))

[ -z "$QUIET" ] && echo "Configuring $NUM_DEVICES devices of $SIZE MB size each."

SIZE=$((${SIZE}*1024*1024))

# Create the modprobe configuration
cat > /etc/modprobe.d/zramcfg.conf <<EOF
# modprobe configuration file generated by zramcfg.
# Configured to use $NUM_DEVICES devices of $SIZE MB size.
# Use zramcfg -r to remove configuration and disable zram.
options zram num_devices=$NUM_DEVICES
EOF

# Create the modules-load configuration
cat > /etc/modules-load.d/zramcfg.conf <<EOF
# modules-load configuration file generated by zramcfg.
# Configured to use $NUM_DEVICES devices of $SIZE MB size.
# Use zramcfg -r to remove configuration and disable zram.
zram
EOF

# Now it's time to generate the udev and fstab rules...

cat > /etc/udev/rules.d/10-zramcfg.rules <<EOF
# udev rules file generated by zramcfg.
# Configured to use $NUM_DEVICES devices of $SIZE MB size each.
# Use zramcfg -r to remove configuration and disable zram.
EOF

#cat > /etc/fstab.d/10-zramcfg <<EOF
## fstab rules file generated by zramcfg.
## Configured to use $NUM_DEVICES devices of $SIZE MB size.
## Use zramcfg -r to remove configuration and disable zram.
#EOF

for num in $(seq 0 $(($NUM_DEVICES - 1))); do
	# Udev
	cat >> /etc/udev/rules.d/10-zramcfg.rules <<EOF
KERNEL=="zram${num}", SUBSYSTEM=="block", DRIVER=="", ACTION=="add", ATTR{disksize}=="0", ATTR{disksize}="${SIZE}", RUN+="/sbin/mkswap \$env{DEVNAME}"
EOF
	
	# fstab
	cat >> /etc/fstab <<EOF
/dev/zram${num}    swap    swap    pri=32767    0    0    # added by zramcfg
EOF

done

[ -z "$QUIET" ] && echo "Successfully configured. Reboot the system to apply the changes."
exit 0
